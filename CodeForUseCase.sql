------------------------------------
--SEQUENCE
------------------------------------
CREATE SEQUENCE SEQ_HISTORY
MINVALUE 1
MAXVALUE 9999
START WITH 1
INCREMENT BY 1
CACHE 20;

CREATE SEQUENCE SEQ_PRICE_HISTORY
MINVALUE 1
MAXVALUE 9999
START WITH 1
INCREMENT BY 1
CACHE 20;

------------------------------------
--PROCEDURE
------------------------------------
--ADD_GAME_SHOPPING_CART

create or replace PROCEDURE ADD_GAME_SHOPPING_CART(
  acc_num_arg IN DECIMAL,
  game_num_arg IN DECIMAL)
IS
BEGIN
  INSERT INTO SHOPPING_CART(account_num,game_num)
  VALUES(acc_num_arg, game_num_arg);
END;

--CONFIRM_BUY

create or replace PROCEDURE CONFIRM_BUY(
  acc_num_arg IN DECIMAL)
IS
x DECIMAL;
BEGIN
  x:= SEQ_HISTORY.NEXTVAL;
  INSERT INTO SHOPPING_HISTORY
  (SHOPPING_NUM,TOTAL,SHOPPING_DATE,ACCOUNT_NUM)
  VALUES(x,(SELECT SUM(price)
   FROM SHOPPING_CART
   JOIN GAME ON SHOPPING_CART.GAME_NUM = GAME.GAME_NUM
   JOIN ACCOUNT ON SHOPPING_CART.ACCOUNT_NUM = ACCOUNT.ACCOUNT_NUM
   WHERE ACCOUNT.ACCOUNT_NUM = acc_num_arg)*
   (SELECT RANK.RANK_DISCOUNT
   FROM RANK
   JOIN ACCOUNT ON RANK.RANK_NUM = ACCOUNT.RANK_NUM
   WHERE ACCOUNT.ACCOUNT_NUM = acc_num_arg),to_char(sysdate),acc_num_arg);
  For i in (SELECT GAME_NUM FROM SHOPPING_CART WHERE ACCOUNT_NUM = acc_num_arg) LOOP
    INSERT INTO SHOPPING_DETAIL(SHOPPING_NUM,GAME_NUM,PRICE_W_TAX)
    VALUES(x,i.GAME_NUM,(SELECT PRICE FROM GAME WHERE GAME_NUM=i.GAME_NUM));
  END LOOP;
  UPDATE ACCOUNT SET BALANCE = BALANCE - 
  (SELECT SUM(price)
   FROM SHOPPING_CART
   JOIN GAME ON SHOPPING_CART.GAME_NUM = GAME.GAME_NUM
   JOIN ACCOUNT ON SHOPPING_CART.ACCOUNT_NUM = ACCOUNT.ACCOUNT_NUM
   WHERE ACCOUNT.ACCOUNT_NUM = acc_num_arg)*
   (SELECT RANK.RANK_DISCOUNT
   FROM RANK
   JOIN ACCOUNT ON RANK.RANK_NUM = ACCOUNT.RANK_NUM
   WHERE ACCOUNT.ACCOUNT_NUM = acc_num_arg)
  WHERE ACCOUNT_NUM = acc_num_arg;
  DELETE FROM SHOPPING_CART WHERE ACCOUNT_NUM = acc_num_arg;
END;

--ENROLL_ACCOUNT

create or replace PROCEDURE ENROLL_ACCOUNT(
pla_num IN DECIMAL,
acc_num IN DECIMAL,
pas_num IN VARCHAR)
IS
BEGIN
  INSERT INTO ACCOUNT(ACCOUNT_NUM, PLAYER_NUM, PASSWORD, BALANCE, RANK_NUM)
  VALUES(acc_num,pla_num,pas_num,0,3);
END;

--REFILL_ACCOUNT

create or replace PROCEDURE REFILL_ACCOUNT(
acc_num_arg IN DECIMAL,
ref_num IN DECIMAL)
IS
BEGIN
  UPDATE ACCOUNT SET BALANCE = BALANCE + ref_num
  WHERE ACCOUNT_NUM = acc_num_arg;
END;

------------------------------------
--TRIGGER
------------------------------------
--add_price_his_trg

create or replace TRIGGER add_price_his_trg
AFTER UPDATE ON GAME
FOR EACH ROW
BEGIN
  INSERT INTO PRICE_HISTORY
  (HISTORY_NUM , GAME_NUM , OLD_PRICE , NEW_PRICE )
  VALUES(SEQ_PRICE_HISTORY.NEXTVAL, :NEW.GAME_NUM, :OLD.PRICE, :NEW.PRICE);
END;

------------------------------------
--SELECT
------------------------------------
--use case 1b
SELECT PLAYER.PLAYER_NAME, GAME.GAME_NAME, GAME.PRICE
FROM GAME
JOIN SHOPPING_CART ON SHOPPING_CART.GAME_NUM = GAME.GAME_NUM
JOIN ACCOUNT ON ACCOUNT.ACCOUNT_NUM = SHOPPING_CART.ACCOUNT_NUM
JOIN PLAYER ON PLAYER.PLAYER_NUM = ACCOUNT.PLAYER_NUM
WHERE GAME.PRICE > 100 AND PLAYER.PLAYER_NUM = 4

--use case 2b
SELECT PLAYER.PLAYER_NAME, GAME.GAME_NAME, STUDIO.STUDIO_NAME
FROM GAME
JOIN STUDIO ON STUDIO.STUDIO_NUM = GAME.STUDIO_NUM
JOIN SHOPPING_DETAIL ON SHOPPING_DETAIL.GAME_NUM = GAME.GAME_NUM
JOIN SHOPPING_HISTORY ON SHOPPING_HISTORY.SHOPPING_NUM = SHOPPING_DETAIL.SHOPPING_NUM
JOIN ACCOUNT ON ACCOUNT.ACCOUNT_NUM = SHOPPING_HISTORY.ACCOUNT_NUM
JOIN PLAYER ON PLAYER.PLAYER_NUM = ACCOUNT.PLAYER_NUM
WHERE GAME.STUDIO_NUM = 2 AND PLAYER.PLAYER_NUM = 2;

--use case 3b
SELECT GAME.GAME_NAME, GAME.PRICE
FROM GAME
WHERE GAME.PRICE < (SELECT BALANCE FROM ACCOUNT WHERE ACCOUNT_NUM = 3);

--use case 4b
SELECT GAME.GAME_NAME,GAME.CONSOLE_NAME,STUDIO.STUDIO_NAME
FROM GAME
JOIN STUDIO ON STUDIO.STUDIO_NUM = GAME.STUDIO_NUM
JOIN PRICE_HISTORY ON PRICE_HISTORY.GAME_NUM = GAME.GAME_NUM
WHERE PRICE_HISTORY.OLD_PRICE > PRICE_HISTORY.NEW_PRICE AND STUDIO.STUDIO_NUM = 3;

--use case 5b
SELECT GAME.TYPE,SUM(GAME.PRICE)
FROM GAME
JOIN SHOPPING_DETAIL ON SHOPPING_DETAIL.GAME_NUM = GAME.GAME_NUM
JOIN SHOPPING_HISTORY ON SHOPPING_HISTORY.SHOPPING_NUM = SHOPPING_DETAIL.SHOPPING_NUM
JOIN ACCOUNT ON SHOPPING_HISTORY.ACCOUNT_NUM = ACCOUNT.ACCOUNT_NUM
GROUP BY GAME.TYPE
ORDER BY COUNT(GAME.PRICE) DESC;

------------------------------------
--INDEX
------------------------------------
CREATE INDEX index_shopping ON SHOPPING_HISTORY (ACCOUNT_NUM);
